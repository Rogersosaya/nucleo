generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.

model Project {
  id          String            @id @default(uuid())
  name        String
  summary     String
  description String
  url         String
  members     MemberOnProject[]
  areas       AreaOnProject[]
}

model Member {
  id          String            @id @default(uuid())
  name        String
  career      String
  role        String            @default("")
  url         String
  testimonial Testimonial?
  areas       AreaOnMember[]
  projects    MemberOnProject[]
}

model Testimonial {
  id       String @id @default(uuid())
  content  String
  member   Member @relation(fields: [memberId], references: [id])
  memberId String @unique
}

model Area {
  id         String          @id @default(uuid())
  name       String
  summary    String
  url        String
  objectives Objective[]
  tasks      Task[]
  subareas   SubArea[]
  members    AreaOnMember[]
  projects   AreaOnProject[]
}

model SubArea {
  id          String @id @default(uuid())
  name        String
  description String
  area        Area   @relation(fields: [areaId], references: [id])
  areaId      String
}

model Objective {
  id          String @id @default(uuid())
  description String
  area        Area   @relation(fields: [areaId], references: [id])
  areaId      String
}

model Task {
  id          String @id @default(uuid())
  description String
  area        Area   @relation(fields: [areaId], references: [id])
  areaId      String
}

model AreaOnMember {
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   String
  area       Area     @relation(fields: [areaId], references: [id])
  areaId     String
  assignedAt DateTime @default(now())
 

  @@id([memberId, areaId])
}

model MemberOnProject {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   String
  assignedAt DateTime @default(now())
  

  @@id([projectId, memberId])
}

model AreaOnProject {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  area       Area     @relation(fields: [areaId], references: [id])
  areaId     String
  assignedAt DateTime @default(now())
  

  @@id([projectId, areaId])
}
